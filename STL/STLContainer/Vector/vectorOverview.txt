Arrays are a fundamental tool in programming, but they come with significant limitations,
especially in dynamic scenarios. In C++, the vector container is from the Standard Template Library (STL)
similar to the array but has some additional advantages. Let’s explore why vectors are often preferred 
over traditional arrays.

Problems with Arrays
Arrays in C++ are inflexible, here’s why they fall short in many real-world situations:

1. Fixed Size
When you declare an array, you must specify its size upfront. For example, if a college admission system allocates
 space for 500 students but only admits 200, memory is wasted. Conversely, if admissions exceed 500, the array cannot
  expand to accommodate new entries.

2. Manual Memory Management
While dynamically allocated arrays (using new and delete) allow some flexibility, they require careful handling.
 Forgetting to deallocate memory leads to leaks, while premature deletion causes crashes.

3. No Built-In Size Tracking
Arrays lack a built-in method to track their size. To determine the number of elements, you must calculate it using 
sizeof(arr)/sizeof(arr[0]), which becomes bulky.

4. No Default Initialization
Arrays contain random garbage values unless explicitly initialized, increasing the risk of bugs.

Advantages of Vectors
Vectors solve these problems while offering additional advantages. Here's how they work:

1. Dynamic Size
Vectors automatically resize themselves as elements are added or removed. For instance, in the college admission 
example, a vector starts empty and grows as students enroll. If students leave, the vector shrinks, freeing unused 
memory. No manual resizing is required.

2. Rich Library Functions
Vectors come with built-in functions that simplify common operations:

Add/Remove Elements: Use push_back(), pop_back(), insert(), or erase().
Access Elements: Use at(index) or [] (like arrays).
Find Size: v.size() returns the current number of elements.
Clear All Elements: v.clear() empties the vector.
These functions eliminate the need to write repetitive loops for basic tasks.

3. Easy Size Tracking
A vector’s size is always accessible via v.size(), avoiding bulky calculations like in the array case.

4. No Need to Pass Size to Functions
When passing a vector to a function, you don’t need to include its size as a parameter.
The vector carries its size internally because vectors are actually objects of a vector class, so they have size 
inside them.

5. Safe to Return From Functions
Unlike arrays, vectors can be safely returned from functions. The vector’s data is copied automatically,
ensuring validity even after the function exits.

6. Default Initialization
When creating a vector of a specific size (e.g., vector<int> v(100);), all elements are automatically initialized with
zeros.

7. Copy a Vector
Copying a vector is as simple as writing v1 = v2. This creates a deep copy of all elements, eliminating the need for
manual loops or memcpy operations.